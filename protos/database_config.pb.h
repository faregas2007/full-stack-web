// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/database_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fdatabase_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fdatabase_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fdatabase_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fdatabase_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fdatabase_5fconfig_2eproto;
namespace full_stack_web {
class database_config;
class database_configDefaultTypeInternal;
extern database_configDefaultTypeInternal _database_config_default_instance_;
}  // namespace full_stack_web
PROTOBUF_NAMESPACE_OPEN
template<> ::full_stack_web::database_config* Arena::CreateMaybeMessage<::full_stack_web::database_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace full_stack_web {

// ===================================================================

class database_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:full_stack_web.database_config) */ {
 public:
  inline database_config() : database_config(nullptr) {}
  virtual ~database_config();

  database_config(const database_config& from);
  database_config(database_config&& from) noexcept
    : database_config() {
    *this = ::std::move(from);
  }

  inline database_config& operator=(const database_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline database_config& operator=(database_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const database_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const database_config* internal_default_instance() {
    return reinterpret_cast<const database_config*>(
               &_database_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(database_config& a, database_config& b) {
    a.Swap(&b);
  }
  inline void Swap(database_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(database_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline database_config* New() const final {
    return CreateMaybeMessage<database_config>(nullptr);
  }

  database_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<database_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const database_config& from);
  void MergeFrom(const database_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(database_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "full_stack_web.database_config";
  }
  protected:
  explicit database_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fdatabase_5fconfig_2eproto);
    return ::descriptor_table_protos_2fdatabase_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kUserFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kDbFieldNumber = 4,
    kSocketFieldNumber = 6,
    kPortFieldNumber = 5,
    kSkipDbCreationFieldNumber = 7,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string user = 2;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // string db = 4;
  void clear_db();
  const std::string& db() const;
  void set_db(const std::string& value);
  void set_db(std::string&& value);
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  std::string* mutable_db();
  std::string* release_db();
  void set_allocated_db(std::string* db);
  private:
  const std::string& _internal_db() const;
  void _internal_set_db(const std::string& value);
  std::string* _internal_mutable_db();
  public:

  // string socket = 6;
  void clear_socket();
  const std::string& socket() const;
  void set_socket(const std::string& value);
  void set_socket(std::string&& value);
  void set_socket(const char* value);
  void set_socket(const char* value, size_t size);
  std::string* mutable_socket();
  std::string* release_socket();
  void set_allocated_socket(std::string* socket);
  private:
  const std::string& _internal_socket() const;
  void _internal_set_socket(const std::string& value);
  std::string* _internal_mutable_socket();
  public:

  // int32 port = 5;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool skip_db_creation = 7;
  void clear_skip_db_creation();
  bool skip_db_creation() const;
  void set_skip_db_creation(bool value);
  private:
  bool _internal_skip_db_creation() const;
  void _internal_set_skip_db_creation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:full_stack_web.database_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr socket_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool skip_db_creation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fdatabase_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// database_config

// string host = 1;
inline void database_config::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& database_config::host() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.host)
  return _internal_host();
}
inline void database_config::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.host)
}
inline std::string* database_config::mutable_host() {
  // @@protoc_insertion_point(field_mutable:full_stack_web.database_config.host)
  return _internal_mutable_host();
}
inline const std::string& database_config::_internal_host() const {
  return host_.Get();
}
inline void database_config::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void database_config::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:full_stack_web.database_config.host)
}
inline void database_config::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:full_stack_web.database_config.host)
}
inline void database_config::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:full_stack_web.database_config.host)
}
inline std::string* database_config::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* database_config::release_host() {
  // @@protoc_insertion_point(field_release:full_stack_web.database_config.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void database_config::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:full_stack_web.database_config.host)
}

// string user = 2;
inline void database_config::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& database_config::user() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.user)
  return _internal_user();
}
inline void database_config::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.user)
}
inline std::string* database_config::mutable_user() {
  // @@protoc_insertion_point(field_mutable:full_stack_web.database_config.user)
  return _internal_mutable_user();
}
inline const std::string& database_config::_internal_user() const {
  return user_.Get();
}
inline void database_config::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void database_config::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:full_stack_web.database_config.user)
}
inline void database_config::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:full_stack_web.database_config.user)
}
inline void database_config::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:full_stack_web.database_config.user)
}
inline std::string* database_config::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* database_config::release_user() {
  // @@protoc_insertion_point(field_release:full_stack_web.database_config.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void database_config::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:full_stack_web.database_config.user)
}

// string passwd = 3;
inline void database_config::clear_passwd() {
  passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& database_config::passwd() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.passwd)
  return _internal_passwd();
}
inline void database_config::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.passwd)
}
inline std::string* database_config::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:full_stack_web.database_config.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& database_config::_internal_passwd() const {
  return passwd_.Get();
}
inline void database_config::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void database_config::set_passwd(std::string&& value) {
  
  passwd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:full_stack_web.database_config.passwd)
}
inline void database_config::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:full_stack_web.database_config.passwd)
}
inline void database_config::set_passwd(const char* value,
    size_t size) {
  
  passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:full_stack_web.database_config.passwd)
}
inline std::string* database_config::_internal_mutable_passwd() {
  
  return passwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* database_config::release_passwd() {
  // @@protoc_insertion_point(field_release:full_stack_web.database_config.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void database_config::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:full_stack_web.database_config.passwd)
}

// string db = 4;
inline void database_config::clear_db() {
  db_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& database_config::db() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.db)
  return _internal_db();
}
inline void database_config::set_db(const std::string& value) {
  _internal_set_db(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.db)
}
inline std::string* database_config::mutable_db() {
  // @@protoc_insertion_point(field_mutable:full_stack_web.database_config.db)
  return _internal_mutable_db();
}
inline const std::string& database_config::_internal_db() const {
  return db_.Get();
}
inline void database_config::_internal_set_db(const std::string& value) {
  
  db_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void database_config::set_db(std::string&& value) {
  
  db_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:full_stack_web.database_config.db)
}
inline void database_config::set_db(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:full_stack_web.database_config.db)
}
inline void database_config::set_db(const char* value,
    size_t size) {
  
  db_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:full_stack_web.database_config.db)
}
inline std::string* database_config::_internal_mutable_db() {
  
  return db_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* database_config::release_db() {
  // @@protoc_insertion_point(field_release:full_stack_web.database_config.db)
  return db_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void database_config::set_allocated_db(std::string* db) {
  if (db != nullptr) {
    
  } else {
    
  }
  db_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:full_stack_web.database_config.db)
}

// int32 port = 5;
inline void database_config::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 database_config::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 database_config::port() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.port)
  return _internal_port();
}
inline void database_config::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void database_config::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.port)
}

// string socket = 6;
inline void database_config::clear_socket() {
  socket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& database_config::socket() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.socket)
  return _internal_socket();
}
inline void database_config::set_socket(const std::string& value) {
  _internal_set_socket(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.socket)
}
inline std::string* database_config::mutable_socket() {
  // @@protoc_insertion_point(field_mutable:full_stack_web.database_config.socket)
  return _internal_mutable_socket();
}
inline const std::string& database_config::_internal_socket() const {
  return socket_.Get();
}
inline void database_config::_internal_set_socket(const std::string& value) {
  
  socket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void database_config::set_socket(std::string&& value) {
  
  socket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:full_stack_web.database_config.socket)
}
inline void database_config::set_socket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  socket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:full_stack_web.database_config.socket)
}
inline void database_config::set_socket(const char* value,
    size_t size) {
  
  socket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:full_stack_web.database_config.socket)
}
inline std::string* database_config::_internal_mutable_socket() {
  
  return socket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* database_config::release_socket() {
  // @@protoc_insertion_point(field_release:full_stack_web.database_config.socket)
  return socket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void database_config::set_allocated_socket(std::string* socket) {
  if (socket != nullptr) {
    
  } else {
    
  }
  socket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), socket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:full_stack_web.database_config.socket)
}

// bool skip_db_creation = 7;
inline void database_config::clear_skip_db_creation() {
  skip_db_creation_ = false;
}
inline bool database_config::_internal_skip_db_creation() const {
  return skip_db_creation_;
}
inline bool database_config::skip_db_creation() const {
  // @@protoc_insertion_point(field_get:full_stack_web.database_config.skip_db_creation)
  return _internal_skip_db_creation();
}
inline void database_config::_internal_set_skip_db_creation(bool value) {
  
  skip_db_creation_ = value;
}
inline void database_config::set_skip_db_creation(bool value) {
  _internal_set_skip_db_creation(value);
  // @@protoc_insertion_point(field_set:full_stack_web.database_config.skip_db_creation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace full_stack_web

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fdatabase_5fconfig_2eproto
